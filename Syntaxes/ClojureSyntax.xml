<?xml version="1.0"?>

<syntax name="sourcecode.clojure">
    <zones>
    	<include collection="language" />
    </zones>
    <library>
    	<collection name="language">
    	    <include collection="container.expression" />
    	    <include collection="container.expression.s-expr.level-1" />
    	    <include collection="x-invalid" />
    	</collection>
    	<collection name="container.expression">
    	    <include collection="keyword.definition" />
    	    <include collection="literal.keyword" />
    	    <include collection="literal.string" />
    	    <include collection="literal.numeric" />
    	    <include collection="literal.collection" />
    	    <include collection="metadata.comment" />
    	    <include collection="container.expression.quote" />
          
    	</collection>
    	
    	<collection name="metadata.comment">
    	    <!-- Line comment-->
    	    <!-- e.g "; (println "hello world")"-->
    		<zone name="metadata.comment.line">
    			<starts-with>
    				<expression>;</expression>
    			</starts-with>
    			<ends-with>
    				<expression>\n\Z</expression>
    			</ends-with>
    		</zone>
    		<!-- Block comment-->
    		<!-- e.g "(comment (println "hello world"))"-->
    		<zone name="metadata.comment.block">
    			<starts-with>
    				<expression>\(\s*comment\s*</expression>
    			</starts-with>
    			<ends-with>
    				<expression>\)</expression>
    			</ends-with>
    			<subzones>
            <include collection="container.expression.s-expr.comment" />
          </subzones>
    		</zone>
    	</collection>
    	<collection name="container.expression.s-expr.comment">
    	    <!-- An s-expression with no highlighting-->
    	    <!-- e.g "(comment (println (+ 1 2))"-->
			<zone name="container.expression.s-expr.comment">
				<starts-with>
					<expression>\(</expression>
				</starts-with>
				<ends-with>
					<expression>\)</expression>
				</ends-with>
				<subzones>
          <include collection="container.expression.s-expr.comment" />
        </subzones>
			</zone>
    	</collection>
    	<collection name="container.expression.quote">
    	    <!-- A quoted expression-->
    	    <!-- e.g "'(println (+ 1 2))"-->
        	<zone name="container.expression.quote">
        	    <starts-with>
        	    	<expression>'+(\()</expression>
        	    	<capture number="1" name="delimiter.balanced.parenthesis.begin" />
        	    </starts-with>
        	    <ends-with>
        	    	<expression>(\))</expression>
        	    	<capture number="1" name="delimiter.balanced.parenthesis.end" />
        	    </ends-with>
        	    <subzones>
        	    	<include collection="container.expression.s-expr.comment" />
        	    </subzones>
        	</zone>
        	<!-- A quoted symbol-->
        	<!-- e.g "'hello world"-->
        	<zone name="container.expression.quote">
        	    <expression>'+[a-zA-Z\+\-\*\!=_][\w\+\-\*\!=_.%]*</expression>
        	</zone>
        	<!-- A quoted number-->
        	<!-- e.g "'100e5"-->
        	<zone name="container.expression.quote">
        	    <expression>'+\d+\.?\d*e\d+|'+\d+\.?\d*</expression>
        	</zone>
        	<!-- A quoted string-->
        	<!-- e.g "'"hey""-->
        	<zone name="container.expression.quote">
        		<starts-with>
        			<expression>'+(")</expression>
        			<capture number="1" name="string.begin" />
        		</starts-with>
        		<ends-with>
        			<expression>(\1)</expression>
        			<capture number="1" name="string.end" />
        		</ends-with>
        		<subzones>
        			<include collection="literal.escape" />
        		</subzones>
        	</zone>
        </collection>
        <collection name="container.expression.s-expr.level-1">
            <zone name="container.expression.s-expr.level-1">
                <starts-with>
                	<expression>(\()[\s,]*([a-zA-Z\+\-\*\!=_][\w\+\-\*\!=_.%]*)|(\()</expression>
                	<capture number="1" name="delimiter.balanced.parenthesis.begin" />
                	<capture number="2" name="container.expression">
                    <subzones>
                      <include collection="container.expression" />
                      <zone name="identifier.function">
                        <expression>.+</expression>
                      </zone>
                    </subzones>
                  </capture>
                	<capture number="3" name="delimiter.balanced.parenthesis.begin" />
                </starts-with>
                <ends-with>
                    <!-- Need to make it so <must have ends-with> to match zone-->
                	<expression>(\))</expression>
                	<capture number="1" name="delimiter.balanced.parenthesis.end" />
                </ends-with>
                <subzones>
                	<include collection="container.expression" />
                	<include collection="container.expression.s-expr" />
                  <include collection="container.expression.symbol" />
                </subzones>
            </zone>
        </collection>
        <collection name="container.expression.s-expr">
        	<!-- An s-expression available for decoration-->
        	<!-- e.g "(println (+ 1 2))"-->
        	<zone name="container.expression.s-expr">
    			<starts-with>
    				<expression>(\()[\s,]*([a-zA-Z\+\-\*\!=_][\w\+\-\*\!=_.%]*)|(\()</expression>
    				<capture number="1" name="delimiter.balanced.parenthesis.begin" />
    				<capture number="2" name="identifier.function" />
    				<capture number="3" name="delimiter.balanced.parenthesis.begin" />
    			</starts-with>
        		<ends-with>
        		    <!-- Need to make it so <must have ends-with> to match zone-->
        			<expression>(\))</expression>
        			<capture number="1" name="delimiter.balanced.parenthesis.end" />
        		</ends-with>
        		<subzones>
        			<include collection="container.expression" />
        			<include collection="container.expression.s-expr" />
              <include collection="container.expression.symbol" />
            </subzones>
        	</zone>
    	</collection>
    	<collection name="x-invalid">
    	    <!-- An extra closing bracket-->
    	    <!-- e.g "(println (+ 1 2)))"-->
    	    <zone name="x-invalid">
    	        <expression>\(|\)</expression>
    	    </zone>
    	</collection>
    	<collection name="keyword.definition">
    	    <!-- defn keyword-->
    	    <!-- e.g "defn"-->
    	    <zone name="keyword.definition.function">
    	        <expression>defn</expression>
              <capture number="1" name="identifier.function" />
    	    </zone>
    	    <!-- fn keyword-->
    	    <!-- e.g "fn"-->
    	    <zone name="keyword.definition.lambda">
    	        <expression>fn</expression>
    	    </zone>
    	</collection>
      <collection name="container.expression.symbol">
    	    <!-- a symbol-->
    	    <!-- e.g "println"-->
    	    <zone name="container.expression.symbol">
    	        <expression>[a-zA-Z\+\-\*\!=_][\w\+\-\*\!=_.%]*</expression>
    	    </zone>
    	</collection>
    	<collection name="literal.escape">
    	    <!-- An escaped double quote-->
    	    <!-- e.g "\""-->
    	    <zone name="literal.escape.quote">
    	    	<expression>(\\)(")</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	    <!-- A newline character-->
    	    <!-- e.g "\n"-->
    	    <zone name="literal.escape.newline">
    	    	<expression>(\\)(n)</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	    <!-- A tab character-->
    	    <!-- e.g "\t"-->
    	    <zone name="literal.escape.tab">
    	    	<expression>(\\)(t)</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	    <!-- A backspace character-->
    	    <!-- e.g "\b"-->
    	    <zone name="literal.escape.backspace">
    	    	<expression>(\\)(b)</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	    <!-- A form feed character-->
    	    <!-- e.g "\f"-->
    	    <zone name="literal.escape.formfeed">
    	    	<expression>(\\)(f)</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	    <!-- A return character-->
    	    <!-- e.g "\r"-->
    	    <zone name="literal.escape.carriage-return">
    	    	<expression>(\\)(r)</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	    <!-- A backslash character-->
    	    <!-- e.g "\\"-->
    	    <zone name="literal.escape.backslash">
    	    	<expression>(\\)(\\)</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	    <!-- A unicode character-->
    	    <!-- e.g "\uDDDD"-->
    	    <zone name="literal.escape.unicode-16">
    	    	<expression>(\\)(u)([a-fA-F0-9]{4})</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    	<capture number="3" name="identity.hex" />
    	    </zone>
    	    <!-- An invalid escaped character-->
    	    <!-- e.g "\55"-->
    	    <zone name="x-invalid">
    	    	<expression>(\\)(.)</expression>
    	    	<capture number="1" name="begin" />
    	    	<capture number="2" name="character" />
    	    </zone>
    	</collection>
    	<collection name="literal.keyword">
    	    <!-- A keyword-->
    	    <!-- e.g ":hello-world"-->
    	    <zone name="literal.keyword">
    	    	<expression>\s*(\:[\w\+\-\*\!_=]+)\b</expression>
    	    </zone>
    	    <!-- The true keyword-->
    	    <!-- e.g "true"-->
    		<zone name="literal.keyword.bool.true">
    			<expression>\b(true)\b</expression>
    		</zone>
    		<!-- The false keyword-->
    		<!-- e.g "false"-->
    		<zone name="literal.keyword.bool.false">
    			<expression>\b(false)\b</expression>
    		</zone>
    		<!-- The nil keyword-->
    		<!-- e.g "nil"-->
    		<zone name="literal.keyword.nothing">
    			<expression>\b(nil)\b</expression>
    		</zone>
    	</collection>
    	<collection name="literal.numeric">
    	    <!-- An exponent number-->
    	    <!-- e.g "100e5"-->
        	<zone name="container.expression">
        		<expression>\b(\d+\.?\d*e\d+)\b</expression>
        		<capture number="1" name="literal.numeric.exponent" />
        	</zone>
        	<!-- A float number-->
        	<!-- e.g "5.5"-->
    	    <zone name="container.expression">
    	    	<expression>\b(\d+\.\d*)\b</expression>
    	    	<capture number="1" name="literal.numeric.float" />
    	    </zone>
    	    <!-- A ratio number-->
    	    <!-- e.g "6/7"-->
    	    <zone name="container.expression">
    	    	<expression>\b(\d+/\d+)\b</expression>
    	    	<capture number="1" name="literal.numeric.x-ratio" />
    	    </zone>
    	    <!-- A decimal integer-->
    	    <!-- e.g "500"-->
    	    <zone name="container.expression">
    	    	<expression>\b(\d+)\b</expression>
    	    	<capture number="1" name="literal.numeric.integer.decimal" />
    	    </zone>
    	</collection>
    	<collection name="literal.string">
    	    <!-- A string-->
    	    <!-- e.g ""hello world""-->
    	    <zone name="literal.string.quoted">
    	    	<starts-with>
    	    		<expression>(")</expression>
    	    		<capture number="1" name="string.begin" />
    	    	</starts-with>
    	    	<ends-with>
    	    		<expression>(\1)</expression>
    	    		<capture number="1" name="string.end" />
    	    	</ends-with>
    	    	<subzones>
    	    		<include collection="literal.escape" />
    	    	</subzones>
    	    </zone>
    	</collection>
    	<collection name="literal.collection">
    	    <!-- A vector-->
    	    <!-- e.g "[1 2 3 4]"-->
    	    <zone name="literal.collection.array">
    	        <starts-with>
    	            <expression>(\[)</expression>
    	            <capture number="1" name="delimiter.balanced.square-brace.begin" />
    	        </starts-with>
    	        <ends-with>
    	            <expression>(\])</expression>
    	            <capture number="1" name="delimiter.balanced.square-brace.end" />
    	        </ends-with>
    	        <subzones>
    	        	<include collection="language" />
    	        </subzones>
    	    </zone>
    	    <!-- A set-->
    	    <!-- e.g "#{1 2 3 4}"-->
    	    <zone name="literal.collection.set">
    	        <starts-with>
    	            <expression>#(\{)</expression>
    	            <capture number="1" name="delimiter.balanced.curly-brace.begin" />
    	        </starts-with>
    	        <ends-with>
    	            <expression>(\})</expression>
    	            <capture number="1" name="delimiter.balanced.curly-brace.end" />
    	        </ends-with>
    	        <subzones>
    	        	<include collection="language" />
    	        </subzones>
    	    </zone>
    	    <!-- A hash map-->
    	    <!-- e.g "{:hello 15}"-->
    	    <zone name="literal.collection.dictionary">
    	        <starts-with>
    	            <expression>(\{)</expression>
    	            <capture number="1" name="delimiter.balanced.curly-brace.begin" />
    	        </starts-with>
    	        <ends-with>
    	            <expression>(\})</expression>
    	            <capture number="1" name="delimiter.balanced.curly-brace.end" />
    	        </ends-with>
    	        <subzones>
    	        	<include collection="language" />
    	        </subzones>
    	    </zone>
    	</collection>
    </library>
</syntax>
    
